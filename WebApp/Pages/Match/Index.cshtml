@page
@model WebApp.Pages.Match.IndexModel
@{
    ViewData["Title"] = "Reversi Game";
}

<style>
    .cell {
        width: 50px;
        height: 50px;
        background-color: darkgreen;
        align-items: center;
        justify-content: center;
        transition: background-color 0.3s;
        border: none;
        /* pointer-events: none; */
    }


    .cell-form {
        /* display: flex; /* Use flexbox for form layout */ */
        justify-content: center; /* Center content horizontally */
        align-items: center; /* Center content vertically */
        height: 100%; /* Make form take full height of the td */
        margin: 0; /* Remove default form margins */
        width: 50px;
        height: 50px;
    }

    .cell-td {
        border: 1px solid black; /* Thicker border */
        background-color: darkgreen;
        width: 50px;
        height: 50px;
        vertical-align: center;
        text-align: center;
    }


    .black, .white {
        border-radius: 50%;
        width: 80%;
        height: 80%;
        pointer-events: none;
        /*         align-items: center;
            justify-content: center; */
        transition: background-color 0.3s;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
        display: flex; /* Use flexbox for form layout */
        justify-content: center; /* Center content horizontally */
        align-items: center; /* Center content vertically */
    }

    .black {
        background-color: #000;
    }

    .white {
        background-color: #fff;
    }

    .cell-suggest {
        border-radius: 50%;
        width: 78%;
        height: 78%;
        border: 1px solid;
        background: none;
    }

    .cell-last {
        border-radius: 50%;
        width: 4px;
        height: 4px;
        background-color: red;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
    }

    /* CSS cho bố cục 3 cột */
    .container {
        display: flex; /* Sử dụng Flexbox */
        justify-content: space-between; /* Tạo khoảng cách đều giữa các cột */
        width: 100%;
        justify-content: center; /* Center content horizontally */
        align-items: center; /* Center content vertically */
    }

    .column {
        flex: 1; /* Mỗi cột chiếm 1 phần bằng nhau */
        padding: 20px; /* Thêm khoảng cách trong mỗi cột */
        border: 1px solid #ccc; /* Đường viền cho mỗi cột */
        box-sizing: border-box; /* Bao gồm padding và border trong chiều rộng */
        width: 100%;
        justify-content: center; /* Center content horizontally */
        align-items: center; /* Center content vertically */
    }

</style>
@* <div style="width:100%"> *@
<div class="container">
    <div class="column">
        <h2>Player 1</h2>
    </div>
    <div class="column">
        <form id="moveForm" method="post">
            <table class="board">
                @for (int row = 0; row < 8; row++)
                {
                    <tr>
                        @for (int col = 0; col < 8; col++)
                        {
                            <td class="cell-td">
                                <button class="button-cell" type="submit" formaction="?handler=MakeMove&row=@row&col=@col">
                                    <div class="cell-form">
                                        @if (Model.Game.Board[row * 8 + col] == 1)
                                        {
                                            <div class="black">
                                            </div>
                                        }
                                        else if (Model.Game.Board[row * 8 + col] == 2)
                                        {
                                            <div class="white">
                                            </div>
                                        }
                                        else if (Model.Game.Board[row * 8 + col] == -1)
                                        {
                                            <div id="suggestPiece" class="cell-suggest"></div>
                                        }
                                    </div>
                                </button>
                                <input type="hidden" asp-for="Game.Board" value="@Model.Game.Board[row*8 + col]" />
                            </td>
                        }
                    </tr>
                }
            </table>
            <input type="hidden" asp-for="Game.IsPlayer1Turn" value="@Model.Game.IsPlayer1Turn" />
            <input type="hidden" asp-for="Game.PlayerOneScore" value="@Model.Game.PlayerOneScore" />
            <input type="hidden" asp-for="Game.PlayerTwoScore" value="@Model.Game.PlayerTwoScore" />
        </form>
    </div>
    <div class="column">
        <h2>Player 2</h2>
    </div>
</div>
@* </div> *@

@* <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.18/signalr.min.js"></script>

<script>
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/gameHub")
        .build();
    document.getElementById("suggestPiece").disabled = true;
    document.getElementById("piece").disabled = true;


    connection.start().then(function () {
        console.log("Connected to SignalR hub");
        // document.getElementById("suggestPiece").disabled = true;
        // document.getElementById("piece").disabled = true;
    }).catch(function (err) {
        return console.error(err.toString());
    });

    connection.on("UpdateGame", function (game) {
        location.reload();
    });

    function makeMove(row, col) {
        connection.invoke("MakeMove", row, col).catch(function (err) {
            return console.error(err.toString());
        });
    }
</script>
 *@
@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
