@page
@model WebApp.Pages.Match2.IndexModel
@{
    ViewData["HideNavbar"] = true;
}
<style>
    .cell {
        width: 50px;
        height: 50px;
        background-color: darkgreen;
        align-items: center;
        justify-content: center;
        transition: background-color 0.3s;
        border: none;
        /* pointer-events: none; */
    }


    .cell-form {
        display: flex; /* Use flexbox for form layout */
        justify-content: center; /* Center content horizontally */
        align-items: center; /* Center content vertically */
        height: 100%; /* Make form take full height of the td */
        margin: 0; /* Remove default form margins */
        width: 50px;
        height: 50px;
    }

    .cell-td {
        border: 1px solid black; /* Thicker border */
        background-color: darkgreen;
        width: 50px;
        height: 50px;
        vertical-align: center;
        text-align: center;
    }


    .black, .white {
        border-radius: 50%;
        width: 80%;
        height: 80%;
        pointer-events: none;
        /*         align-items: center;
            justify-content: center; */
        transition: background-color 0.3s;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
        display: flex; /* Use flexbox for form layout */
        justify-content: center; /* Center content horizontally */
        align-items: center; /* Center content vertically */
    }

    .black {
        background-color: #000;
    }

    .white {
        background-color: #fff;
    }

    .cell-suggest {
        border-radius: 50%;
        width: 78%;
        height: 78%;
        border: 1px solid;
        background: none;
    }

    .button-cell {
        width: 50px;
        height: 50px;
        background-color: darkgreen;
        align-items: center;
        justify-content: center;
        transition: background-color 0.3s;
        border: none;
    }

    .cell-last {
        border-radius: 50%;
        width: 4px;
        height: 4px;
        background-color: red;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
    }

    /* CSS cho bố cục 3 cột */
   

    .game-container {
        display: flex; /* Sử dụng Flexbox */
        justify-content: space-between; /* Tạo khoảng cách đều giữa các cột */
        width: 100%;
        justify-content: center; /* Center content horizontally */
        align-items: center; /* Center content vertically */
        text-align: center;
    }

    .game-column {
        flex: 1; /* Mỗi cột chiếm 1 phần bằng nhau */
        padding: 20px; /* Thêm khoảng cách trong mỗi cột */
        /* border: 1px solid #ccc; /* Đường viền cho mỗi cột */ */
        box-sizing: border-box; /* Bao gồm padding và border trong chiều rộng */
        width: 100%;
        justify-content: center; /* Center content horizontally */
        align-items: center; /* Center content vertically */
    }
    .black-piece {
        border-radius: 50%;
        width: 50px;
        height: 50px;
        background-color: #000;
        color:white;
        text-align: center;
        margin: auto;
    }

    .white-piece {
        border-radius: 50%;
        width: 50px;
        height: 50px;
        background-color: #fff;
        border: 1px solid black; /* Thicker border */
        color:black;
        text-align: center;
        margin: auto;
    }
    .board {
        margin-top: 50px;
    }

    .exit-column {
        flex: 1; /* Mỗi cột chiếm 1 phần bằng nhau */
        /* padding: 20px; /* Thêm khoảng cách trong mỗi cột */ */
        /* border: 1px solid #ccc; /* Đường viền cho mỗi cột */ */ box-sizing: border-box; /* Bao gồm padding và border trong chiều rộng */
        width: 100%;
        /* justify-content: center; /* Center content horizontally */ */
        align-items: center; /* Center content vertically */
    }
</style>
<div style="width=100%">
    <div class="game-container">
        <div class="game-column">
            <h4><i class="fas fa-user"></i>&nbsp; user1</h4>
            <h4 class="black-piece">4</h4>
        </div>
        <div class="game-column">
            <h5 style="text-align:center;margin-top:30px;margin-bottom:10px">user1's turn'</h5>
            <table class="board">
                @for (int row = 0; row < 8; row++)
                {
                    <tr>
                        @for (int col = 0; col < 8; col++)
                        {
                            var index = row * 8 + col;
                            var value = Model.Game.Board[index];

                            <td class="cell-td">
                                <button class="cell" onclick="makeMove(@row, @col)">
                                    @if (value == 1)
                                    {
                                        <div class="black"></div>
                                    }
                                    else if (value == 2)
                                    {
                                        <div class="white"></div>
                                    }
                                    else if (value == -1)
                                    {
                                        <div class="cell-suggest"></div>
                                    }
                                </button>
                            </td>
                        }
                    </tr>
                }
            </table>
        </div>
        <div class="game-column">
            <h4 style="color: blue;"><i class="fas fa-user" style="color: blue;"></i>&nbsp; user2</h4>
            <h4 class="white-piece">5</h4>
        </div>
        <div class="exit-column" style="align-items:center">
            <button>Exit</button>
        </div>
    </div>
</div>




<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.18/signalr.min.js"></script>
<script>
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/gameHub")
        .build();

    connection.start().then(function () {
        console.log("Connected to SignalR hub");
    }).catch(function (err) {
        return console.error(err.toString());
    });

    connection.on("UpdateGame", function (game) {
        for (let i = 0; i < game.board.length; i++) {
            const row = Math.floor(i / 8);
            const col = i % 8;
            const cell = document.querySelector(`.board tr:nth-child(${row + 1}) td:nth-child(${col + 1}) button`);

            if (game.board[i] === 1) {
                cell.innerHTML = '<div class="black"></div>';
            } else if (game.board[i] === 2) {
                cell.innerHTML = '<div class="white"></div>';
            } else if (game.board[i] === -1) {
                cell.innerHTML = '<div class="cell-suggest"></div>'; // Clear any previous suggestion indicator if any
            }
        }

        // Update turn indicator
        const turnIndicator = document.querySelector('.game-column h5');
        turnIndicator.innerText = game.isPlayer1Turn ? "user1's turn" : "user2's turn";
    });

    function makeMove(row, col) {
        connection.invoke("MakeMove", row, col).catch(function (err) {
            return console.error(err.toString());
        });
    }
</script>